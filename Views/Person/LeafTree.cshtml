@{
    ViewData["Title"] = "الشجرة العائلية - شكل أوراق الشجرة";
    var familyTreeId = ViewBag.FamilyTreeId;
    var familyTreeName = ViewBag.FamilyTreeName ?? "شجرة عائلية";
    var personsCount = ViewBag.PersonsCount ?? 0;
    var personsJson = ViewBag.PersonsJson ?? "[]";
}

@if (personsCount == 0)
{
    <div class="container-fluid mt-4" dir="rtl">
        <div class="alert alert-info text-center">
            <h4>ℹ️ لا توجد بيانات</h4>
            <p>لم يتم إضافة أي أفراد إلى هذه الشجرة العائلية بعد.</p>
            <a href="@Url.Action("Create", "Person", new { familyTreeId = familyTreeId })" class="btn btn-primary">
                <i class="fas fa-plus"></i> إضافة أول فرد
            </a>
        </div>
    </div>
    return;
}

<div class="container-fluid mt-4" dir="rtl">
    <div class="text-center mb-4">
        <h2>@familyTreeName</h2>
        <p class="text-muted">عدد الأفراد: @personsCount</p>
    </div>

    <div class="text-center mb-3">
        <button id="printPdf" class="btn btn-success">
            <i class="fas fa-file-pdf me-2"></i> طباعة PDF
        </button>
        <button id="toggleColor" class="btn btn-outline-primary ms-2">
            <i class="fas fa-palette me-2"></i> تبديل الألوان
        </button>
    </div>

    <div id="tree-container" style="width: 100%; height: 700px; border: 1px solid #ddd; border-radius: 10px; background: linear-gradient(#f8fdf9, #ffffff); overflow: auto; position: relative;">
        <canvas id="tree-canvas" width="2500" height="1200" style="position: absolute; top: 0; left: 0;"></canvas>
        <div id="clickable-areas" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></div>
    </div>

    <!-- معلومات عند التمرير -->
    <div id="node-info" class="card mt-3" style="display: none;">
        <div class="card-body">
            <h5 id="info-name"></h5>
            <p id="info-details" class="mb-0"></p>
        </div>
    </div>
</div>

<style>
    .leaf-node {
        position: absolute;
        width: 160px;
        height: 160px;
        cursor: pointer;
        z-index: 10;
        transition: transform 0.3s ease;
    }

        .leaf-node:hover {
            transform: scale(1.05);
        }

    .leaf-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        color: #2c3e50;
        font-weight: bold;
        width: 140px;
        z-index: 20;
        pointer-events: none;
    }

    .node-name {
        font-size: 16px;
        line-height: 1.3;
        margin-bottom: 6px;
        font-weight: 700;
    }

    .node-details {
        font-size: 12px;
        color: #7f8c8d;
        line-height: 1.2;
    }

    .connection-line {
        stroke: #34495e;
        stroke-width: 2;
        fill: none;
    }

    .pyramid-container {
        position: relative;
        width: 100%;
        height: 100%;
        padding: 20px;
    }

    .generation-label {
        position: absolute;
        left: 10px;
        background: rgba(0,0,0,0.1);
        padding: 6px 12px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
        color: #2c3e50;
    }

    #tree-container {
        cursor: grab;
    }

        #tree-container:active {
            cursor: grabbing;
        }

    .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        z-index: 100;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

@section Scripts {
    <script>
        // بيانات الشجرة من قاعدة البيانات
        const personsJson = '@Html.Raw(personsJson)';
        const familyTreeId = @familyTreeId;
        const personsCount = @personsCount;

        let treeData = [];
        let panning = false;
        let startX, startY, scrollLeft, scrollTop;
        let coloredMode = false; // الوضع الافتراضي بدون ألوان
        const canvas = document.getElementById('tree-canvas');
        const ctx = canvas.getContext('2d');

        // تحميل البيانات الحقيقية
        function loadRealData() {
            try {
                if (personsJson && personsJson !== '[]') {
                    treeData = JSON.parse(personsJson);
                    console.log('تم تحميل البيانات:', treeData.length, 'فرد');
                    return true;
                }
                return false;
            } catch (e) {
                console.error('خطأ في تحميل البيانات:', e);
                return false;
            }
        }

        // رسم ورقة الشجرة
        function drawLeaf(x, y, scale, name, details, gender) {
            ctx.save();
            ctx.translate(x, y);
            ctx.scale(scale, scale);

            // حجم الورقة الأكبر
            const leafWidth = 80;
            const leafHeight = 60;

            // شكل الورقة
            ctx.beginPath();
            ctx.moveTo(leafWidth, 0);
            ctx.bezierCurveTo(leafWidth * 0.6, -leafHeight, -leafWidth * 0.6, -leafHeight, -leafWidth, 0);
            ctx.bezierCurveTo(-leafWidth * 0.6, leafHeight, leafWidth * 0.6, leafHeight, leafWidth, 0);
            ctx.closePath();

            if (coloredMode) {
                // وضع ملون
                let color1, color2;
                if (gender === 'Male') {
                    color1 = '#e3f2fd';
                    color2 = '#bbdefb';
                } else {
                    color1 = '#fce4ec';
                    color2 = '#f8bbd9';
                }

                // تدرج تعبئة
                const grad = ctx.createLinearGradient(-leafWidth, -leafHeight, leafWidth, leafHeight);
                grad.addColorStop(0, color1);
                grad.addColorStop(1, color2);
                ctx.fillStyle = grad;
                ctx.fill();
            } else {
                // وضع بدون ألوان - خلفية بيضاء
                ctx.fillStyle = '#ffffff';
                ctx.fill();
            }

            // حد الورقة
            ctx.strokeStyle = coloredMode ? '#2c3e50' : '#000000';
            ctx.lineWidth = 2;
            ctx.stroke();

            // كتابة الاسم
            ctx.fillStyle = coloredMode ? '#2c3e50' : '#000000';
            ctx.font = 'bold 14px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';

            // تقسيم النص لأسطر متعددة
            const maxCharsPerLine = 12;
            const nameLines = splitTextIntoLines(name || 'غير معروف', maxCharsPerLine);

            // رسم الأسطر
            nameLines.forEach((line, index) => {
                ctx.fillText(line, 0, -10 + (index * 14));
            });

            // رسم التفاصيل إذا كانت موجودة
            if (details) {
                ctx.font = '11px Arial';
                ctx.fillStyle = coloredMode ? '#7f8c8d' : '#666666';
                ctx.fillText(details, 0, 15);
            }

            ctx.restore();
        }

        // دالة لتقسيم النص إلى أسطر
        function splitTextIntoLines(text, maxChars) {
            const words = text.split(' ');
            const lines = [];
            let currentLine = '';

            words.forEach(word => {
                if ((currentLine + ' ' + word).length <= maxChars) {
                    currentLine += (currentLine ? ' ' : '') + word;
                } else {
                    if (currentLine) lines.push(currentLine);
                    currentLine = word;
                }
            });

            if (currentLine) lines.push(currentLine);
            return lines;
        }

        // رسم الاتصال بين الورقتين (غصن)
        function drawBranch(x1, y1, x2, y2) {
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.bezierCurveTo(x1 + 25, y1 + 10, x2 - 25, y2 - 10, x2, y2);
            ctx.strokeStyle = coloredMode ? '#34495e' : '#000000';
            ctx.lineWidth = 2;
            ctx.stroke();
        }

        function organizeByGenerations(persons) {
            const generations = [];
            const firstGen = persons.filter(person => !person.fatherId);
            generations.push(firstGen);

            let currentGen = firstGen;
            while (currentGen.length > 0) {
                const nextGen = [];
                currentGen.forEach(person => {
                    const children = persons.filter(p => p.fatherId === person.id);
                    nextGen.push(...children);
                });

                if (nextGen.length > 0) {
                    generations.push(nextGen);
                }
                currentGen = nextGen;
            }
            return generations;
        }

        function drawConnections() {
            treeData.forEach(person => {
                if (person.fatherId) {
                    const father = treeData.find(p => p.id === person.fatherId);
                    if (father && father.canvasX && father.canvasY && person.canvasX && person.canvasY) {
                        drawBranch(father.canvasX, father.canvasY + 40, person.canvasX, person.canvasY - 40);
                    }
                }
            });
        }

        function drawTree() {
            // مسح Canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            const container = $('#clickable-areas');
            container.empty();

            if (treeData.length === 0) {
                const loadingDiv = $('<div class="loading-spinner"></div>');
                loadingDiv.html(`
                    <div class="alert alert-warning text-center">
                        لا توجد بيانات لعرضها
                    </div>
                `);
                container.append(loadingDiv);
                return;
            }

            const generations = organizeByGenerations(treeData);
            const containerWidth = 2500;
            const startY = 100;
            const verticalSpacing = 180;

            // رسم الأجيال
            generations.forEach((generation, genIndex) => {
                const generationY = startY + (genIndex * verticalSpacing);
                const generationSize = generation.length;

                const horizontalSpacing = Math.min(220, (containerWidth - 100) / Math.max(1, generationSize));
                const totalWidth = generationSize * horizontalSpacing;
                const startX = (containerWidth - totalWidth) / 2;

                // رسم تسمية الجيل
                ctx.fillStyle = 'rgba(0,0,0,0.1)';
                ctx.fillRect(10, generationY - 30, 80, 25);
                ctx.fillStyle = coloredMode ? '#2c3e50' : '#000000';
                ctx.font = 'bold 13px Arial';
                ctx.textAlign = 'left';
                ctx.fillText(`الجيل ${genIndex + 1}`, 15, generationY - 15);

                // رسم أفراد الجيل
                generation.forEach((person, personIndex) => {
                    const personX = startX + (personIndex * horizontalSpacing);
                    const personY = generationY;

                    // حفظ إحداثيات الشخص للاتصالات
                    person.canvasX = personX;
                    person.canvasY = personY;

                    // رسم الورقة
                    const birthDate = formatDate(person.birthDate);
                    const details = birthDate ? birthDate : '';
                    drawLeaf(personX, personY, 1.0, person.fullName || 'غير معروف', details, person.gender);

                    // إضافة منطقة نقر تفاعلية
                    const clickableDiv = $(`
                        <div class="leaf-node"
                             data-person-id="${person.id}"
                             style="left: ${personX - 80}px; top: ${personY - 60}px; width: 160px; height: 160px;">
                            <div class="leaf-content">
                                <div class="node-name">${person.fullName || 'غير معروف'}</div>
                                <div class="node-details">${details}</div>
                            </div>
                        </div>
                    `);

                    clickableDiv.on('click', function(e) {
                        e.stopPropagation();
                        showPersonDetails(person);
                    });

                    container.append(clickableDiv);
                });
            });

            // رسم الاتصالات بعد رسم جميع الأوراق
            setTimeout(drawConnections, 100);
        }

        function formatDate(dateString) {
            try {
                if (!dateString) return '';
                const date = new Date(dateString);
                return isNaN(date.getTime()) ? '' : date.toLocaleDateString('ar-EG');
            } catch (e) {
                return '';
            }
        }

        function showPersonDetails(person) {
            const birthDate = formatDate(person.birthDate);
            const city = person.city || '';
            const occupationName = person.occupationName || '';

            let details = '';
            if (birthDate) details += `الميلاد: ${birthDate}<br>`;
            if (city) details += `المدينة: ${city}<br>`;
            if (occupationName) details += `المهنة: ${occupationName}`;
            if (!details) details = 'لا توجد معلومات إضافية';

            const infoContent = `
                <div class="card-body">
                    <h5>${person.fullName || 'غير معروف'}</h5>
                    <p>${details}</p>
                    <div class="mt-2">
                        <a href="/Person/Details/${person.id}" class="btn btn-info btn-sm">
                            <i class="fas fa-eye"></i> تفاصيل
                        </a>
                        <a href="/Person/Edit/${person.id}" class="btn btn-warning btn-sm">
                            <i class="fas fa-edit"></i> تعديل
                        </a>
                        <a href="/Person/Create?familyTreeId=${familyTreeId}&fatherId=${person.id}" class="btn btn-success btn-sm">
                            <i class="fas fa-plus"></i> إضافة ابن
                        </a>
                    </div>
                </div>
            `;

            $('#node-info').html(infoContent).show();
        }

        function toggleColorMode() {
            coloredMode = !coloredMode;
            $('#toggleColor').html(
                coloredMode ?
                '<i class="fas fa-palette me-2"></i> الوضع البسيط' :
                '<i class="fas fa-palette me-2"></i> الوضع الملون'
            );
            drawTree();
        }

        function printToPdf() {
            // إخفاء مناطق النقر مؤقتاً
            $('#clickable-areas').hide();

            html2canvas(canvas, {
                scale: 2,
                useCORS: true,
                backgroundColor: '#f8fdf9'
            }).then(canvas => {
                // إعادة إظهار مناطق النقر
                $('#clickable-areas').show();

                const imgData = canvas.toDataURL('image/png');
                const pdf = new jspdf.jsPDF({
                    orientation: 'landscape',
                    unit: 'mm',
                    format: 'a4'
                });

                const pdfWidth = pdf.internal.pageSize.getWidth();
                const pdfHeight = pdf.internal.pageSize.getHeight();
                const imgWidth = canvas.width;
                const imgHeight = canvas.height;

                const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight) * 0.9;
                const finalWidth = imgWidth * ratio;
                const finalHeight = imgHeight * ratio;

                pdf.addImage(imgData, 'PNG',
                    (pdfWidth - finalWidth) / 2,
                    (pdfHeight - finalHeight) / 2,
                    finalWidth,
                    finalHeight
                );

                // إضافة عنوان
                pdf.setFontSize(16);
                pdf.setTextColor(40, 40, 40);
                pdf.text('الشجرة العائلية', pdfWidth / 2, 20, { align: 'center' });

                pdf.setFontSize(10);
                pdf.setTextColor(100);
                pdf.text(`عدد الأفراد: ${personsCount}`, 20, pdfHeight - 10);
                pdf.text(`تم الإنشاء في: ${new Date().toLocaleDateString('ar-EG')}`, pdfWidth - 50, pdfHeight - 10);

                const fileName = `شجرة_عائلية.pdf`;
                pdf.save(fileName);
            });
        }

        function initializeTree() {
            const container = $('#clickable-areas');
            container.html(`
                <div class="loading-spinner">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">جاري التحميل...</span>
                    </div>
                    <p class="mt-2">جاري تحميل الشجرة العائلية...</p>
                </div>
            `);

            setTimeout(() => {
                if (treeData.length > 0) {
                    drawTree();
                    $('.loading-spinner').remove();
                }
            }, 100);
        }

        function setupPan() {
            const container = $('#tree-container');

            container.on('mousedown', function(e) {
                if ($(e.target).closest('.leaf-node').length === 0) {
                    panning = true;
                    startX = e.pageX - container.offset().left;
                    startY = e.pageY - container.offset().top;
                    scrollLeft = container.scrollLeft();
                    scrollTop = container.scrollTop();
                    container.css('cursor', 'grabbing');
                }
            });

            $(document).on('mouseup', function() {
                panning = false;
                container.css('cursor', 'grab');
            });

            container.on('mousemove', function(e) {
                if (!panning) return;
                e.preventDefault();
                const x = e.pageX - container.offset().left;
                const y = e.pageY - container.offset().top;
                const walkX = (x - startX) * 2;
                const walkY = (y - startY) * 2;
                container.scrollLeft(scrollLeft - walkX);
                container.scrollTop(scrollTop - walkY);
            });

            $('#printPdf').on('click', printToPdf);
            $('#toggleColor').on('click', toggleColorMode);
        }

        $(document).ready(function () {
            if (loadRealData()) {
                initializeTree();
                setupPan();
            } else {
                $('#clickable-areas').html(`
                    <div class="alert alert-danger text-center" style="margin: 50px;">
                        <h4>❌ خطأ في تحميل البيانات</h4>
                        <p>حدث خطأ أثناء تحميل بيانات الشجرة العائلية.</p>
                    </div>
                `);
            }

            $(document).on('click', function(e) {
                if (!$(e.target).closest('#node-info, .leaf-node').length) {
                    $('#node-info').hide();
                }
            });
        });
    </script>
}