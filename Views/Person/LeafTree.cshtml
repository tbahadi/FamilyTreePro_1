@{
    ViewData["Title"] = "الشجرة العائلية - شكل أوراق الشجرة";
    var familyTreeId = ViewBag.FamilyTreeId;
    var familyTreeName = ViewBag.FamilyTreeName ?? "شجرة عائلية";
    var personsCount = ViewBag.PersonsCount ?? 0;
    var personsJson = ViewBag.PersonsJson ?? "[]";
}

@if (personsCount == 0)
{
    <div class="container-fluid mt-4" dir="rtl">
        <div class="alert alert-info text-center">
            <h4>ℹ️ لا توجد بيانات</h4>
            <p>لم يتم إضافة أي أفراد إلى هذه الشجرة العائلية بعد.</p>
            <a href="@Url.Action("Create", "Person", new { familyTreeId = familyTreeId })" class="btn btn-primary">
                <i class="fas fa-plus"></i> إضافة أول فرد
            </a>
        </div>
    </div>
    return;
}

<div class="container-fluid mt-4" dir="rtl">
    <div class="text-center mb-4">
        <h2>@familyTreeName</h2>
        <p class="text-muted">عدد الأفراد: @personsCount</p>
    </div>

    <div class="text-center mb-3">
        <button id="printPdf" class="btn btn-success me-2">
            <i class="fas fa-file-pdf me-2"></i> طباعة PDF
        </button>
        <button id="toggleStyle" class="btn btn-secondary">
            <i class="fas fa-palette me-2"></i> النمط الملوّن
        </button>
    </div>

    <div id="tree-container" style="width: 100%; height: 900px; border: 1px solid #ccc; border-radius: 10px; background: linear-gradient(#eaffef, #ffffff); overflow: auto; position: relative;">
        <canvas id="tree-canvas" width="4000" height="2000" style="position: absolute; top: 0; left: 0;"></canvas>
        <div id="clickable-areas" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></div>
    </div>

    <!-- الكارت الجانبي -->
    <div id="node-info" class="card mt-3 shadow-lg" style="display: none; position: fixed; top: 80px; right: 20px; width: 320px; z-index: 999;">
        <div class="card-body"></div>
    </div>
</div>

<style>
    #tree-container {
        cursor: grab;
    }

        #tree-container:active {
            cursor: grabbing;
        }

    .leaf-node {
        position: absolute;
        width: 240px;
        height: 170px;
        cursor: pointer;
        z-index: 10;
        border-radius: 50%;
        transition: transform 0.3s ease;
    }

        .leaf-node:hover {
            transform: scale(1.1);
        }

    .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        z-index: 100;
    }

    #node-info {
        animation: slideIn 0.4s ease;
    }

    @@keyframes slideIn {
        from

    {
        opacity: 0;
        transform: translateX(50px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

@section Scripts {
    <script>
        const personsJson = '@Html.Raw(personsJson)';
        const familyTreeId = @familyTreeId;
        const personsCount = @personsCount;

        let treeData = [];
        let colorfulMode = true;
        let panning = false;
        let startX, startY, scrollLeft, scrollTop;

        const canvas = document.getElementById('tree-canvas');
        const ctx = canvas.getContext('2d');

        function loadRealData() {
            try {
                if (personsJson && personsJson !== '[]') {
                    treeData = JSON.parse(personsJson);
                    return true;
                }
                return false;
            } catch (e) {
                console.error('خطأ في تحميل البيانات:', e);
                return false;
            }
        }

        // رسم الورقة (أكبر + الاسم كامل)
        function drawLeaf(x, y, scale, name, gender) {
            ctx.save();
            ctx.translate(x, y);
            ctx.scale(scale, scale);

            let fillStyle, strokeStyle = '#333';
            if (colorfulMode) {
                if (gender === 'Male') {
                    const grad = ctx.createLinearGradient(-120, -90, 120, 90);
                    grad.addColorStop(0, '#a8e6cf');
                    grad.addColorStop(1, '#56ab2f');
                    fillStyle = grad;
                } else {
                    const grad = ctx.createLinearGradient(-120, -90, 120, 90);
                    grad.addColorStop(0, '#ffd1dc');
                    grad.addColorStop(1, '#e91e63');
                    fillStyle = grad;
                }
            } else {
                fillStyle = '#ffffff';
                strokeStyle = '#000000';
            }

            ctx.beginPath();
            ctx.moveTo(120, 0);
            ctx.bezierCurveTo(70, -80, -70, -80, -120, 0);
            ctx.bezierCurveTo(-70, 80, 70, 80, 120, 0);
            ctx.closePath();

            ctx.fillStyle = fillStyle;
            ctx.fill();

            ctx.strokeStyle = strokeStyle;
            ctx.lineWidth = colorfulMode ? 1.5 : 2;
            ctx.stroke();

            // عرض الاسم الكامل بدون اختصار
            ctx.fillStyle = colorfulMode ? '#fff' : '#000';
            ctx.font = 'bold 18px "Tajawal", Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(name, 0, 0);

            ctx.restore();
        }

        function drawBranch(x1, y1, x2, y2) {
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.bezierCurveTo(x1 + 30, y1 + 8, x2 - 30, y2 - 8, x2, y2);
            ctx.strokeStyle = '#5a7b4f';
            ctx.lineWidth = 2;
            ctx.stroke();
        }

        function organizeByGenerations(persons) {
            const generations = [];
            const firstGen = persons.filter(person => !person.fatherId);
            generations.push(firstGen);

            let currentGen = firstGen;
            while (currentGen.length > 0) {
                const nextGen = [];
                currentGen.forEach(person => {
                    const children = persons.filter(p => p.fatherId === person.id);
                    nextGen.push(...children);
                });
                if (nextGen.length > 0) generations.push(nextGen);
                currentGen = nextGen;
            }
            return generations;
        }

        function drawConnections() {
            treeData.forEach(person => {
                if (person.fatherId) {
                    const father = treeData.find(p => p.id === person.fatherId);
                    if (father && father.canvasX && father.canvasY && person.canvasX && person.canvasY) {
                        drawBranch(father.canvasX, father.canvasY + 50, person.canvasX, person.canvasY - 50);
                    }
                }
            });
        }

        function drawTree() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            const container = $('#clickable-areas');
            container.empty();

            if (treeData.length === 0) return;

            const generations = organizeByGenerations(treeData);
            const containerWidth = 4000;
            const startY = 150;
            const verticalSpacing = 250;

            generations.forEach((generation, genIndex) => {
                const generationY = startY + (genIndex * verticalSpacing);
                const generationSize = generation.length;
                const horizontalSpacing = Math.min(300, (containerWidth - 200) / Math.max(1, generationSize));
                const totalWidth = generationSize * horizontalSpacing;
                const startX = (containerWidth - totalWidth) / 2; // ✅ تمركز في الوسط

                ctx.fillStyle = '#555';
                ctx.font = 'bold 14px Arial';
                ctx.textAlign = 'left';
                ctx.fillText(`الجيل ${genIndex + 1}`, 40, generationY - 30);

                generation.forEach((person, personIndex) => {
                    const personX = startX + (personIndex * horizontalSpacing);
                    const personY = generationY;
                    person.canvasX = personX;
                    person.canvasY = personY;

                    drawLeaf(personX, personY, 1.3, person.fullName || 'غير معروف', person.gender);

                    const clickableDiv = $(`
                        <div class="leaf-node"
                             data-person-id="${person.id}"
                             style="left: ${personX - 120}px; top: ${personY - 85}px;">
                        </div>
                    `);
                    clickableDiv.on('click', function(e) {
                        e.stopPropagation();
                        showPersonDetails(person);
                    });
                    container.append(clickableDiv);
                });
            });

            setTimeout(drawConnections, 100);
        }

        function showPersonDetails(person) {
            const birthDate = person.birthDate ? new Date(person.birthDate).toLocaleDateString('ar-EG') : '';
            const city = person.city || '';
            const occupationName = person.occupationName || '';

            let details = '';
            if (birthDate) details += `📅 الميلاد: ${birthDate}<br>`;
            if (city) details += `🏙️ المدينة: ${city}<br>`;
            if (occupationName) details += `💼 المهنة: ${occupationName}`;
            if (!details) details = 'لا توجد معلومات إضافية';

            $('#node-info .card-body').html(`
                <div class="text-center mb-2">
                    <h5 class="fw-bold text-success">${person.fullName || 'غير معروف'}</h5>
                </div>
                <p>${details}</p>
                <div class="mt-3 d-flex justify-content-between">
                    <a href="/Person/Details/${person.id}" class="btn btn-info btn-sm">
                        <i class="fas fa-eye"></i> تفاصيل
                    </a>
                    <a href="/Person/Edit/${person.id}" class="btn btn-warning btn-sm">
                        <i class="fas fa-edit"></i> تعديل
                    </a>
                    <a href="/Person/Create?familyTreeId=${familyTreeId}&fatherId=${person.id}" class="btn btn-success btn-sm">
                        <i class="fas fa-plus"></i> إضافة ابن
                    </a>
                </div>
            `).show();
            $('#node-info').fadeIn(200);
        }

        function printToPdf() {
            $('#clickable-areas').hide();
            html2canvas(canvas, { scale: 2, useCORS: true, backgroundColor: '#eaffef' }).then(canvas => {
                $('#clickable-areas').show();

                const imgData = canvas.toDataURL('image/png');
                const pdf = new jspdf.jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4' });
                const pdfWidth = pdf.internal.pageSize.getWidth();
                const pdfHeight = pdf.internal.pageSize.getHeight();
                const ratio = Math.min(pdfWidth / canvas.width, pdfHeight / canvas.height) * 0.9;
                const finalWidth = canvas.width * ratio;
                const finalHeight = canvas.height * ratio;

                pdf.addImage(imgData, 'PNG',
                    (pdfWidth - finalWidth) / 2,
                    (pdfHeight - finalHeight) / 2,
                    finalWidth, finalHeight
                );

                pdf.setFontSize(16);
                pdf.text('الشجرة العائلية', pdfWidth / 2, 20, { align: 'center' });
                pdf.save('شجرة_عائلية.pdf');
            });
        }

        function initializeTree() {
            $('#clickable-areas').html(`
                <div class="loading-spinner">
                    <div class="spinner-border text-primary" role="status"></div>
                    <p class="mt-2">جاري تحميل الشجرة العائلية...</p>
                </div>
            `);

            setTimeout(() => {
                if (treeData.length > 0) {
                    drawTree();
                    $('.loading-spinner').remove();
                }
            }, 200);
        }

        function setupPan() {
            const container = $('#tree-container');
            container.on('mousedown', function(e) {
                if ($(e.target).closest('.leaf-node').length === 0) {
                    panning = true;
                    startX = e.pageX - container.offset().left;
                    startY = e.pageY - container.offset().top;
                    scrollLeft = container.scrollLeft();
                    scrollTop = container.scrollTop();
                    container.css('cursor', 'grabbing');
                }
            });

            $(document).on('mouseup', function() {
                panning = false;
                container.css('cursor', 'grab');
            });

            container.on('mousemove', function(e) {
                if (!panning) return;
                e.preventDefault();
                const x = e.pageX - container.offset().left;
                const y = e.pageY - container.offset().top;
                container.scrollLeft(scrollLeft - (x - startX) * 2);
                container.scrollTop(scrollTop - (y - startY) * 2);
            });

            $('#printPdf').on('click', printToPdf);
            $('#toggleStyle').on('click', function() {
                colorfulMode = !colorfulMode;
                $(this).html(colorfulMode
                    ? '<i class="fas fa-palette me-2"></i> النمط الملوّن'
                    : '<i class="fas fa-square me-2"></i> النمط الأبيض');
                drawTree();
            });
        }

        $(document).ready(function() {
            if (loadRealData()) {
                initializeTree();
                setupPan();
            } else {
                $('#clickable-areas').html(`
                    <div class="alert alert-danger text-center" style="margin: 50px;">
                        <h4>❌ خطأ في تحميل البيانات</h4>
                        <p>حدث خطأ أثناء تحميل بيانات الشجرة العائلية.</p>
                    </div>
                `);
            }

            $(document).on('click', function(e) {
                if (!$(e.target).closest('#node-info, .leaf-node').length) {
                    $('#node-info').fadeOut(200);
                }
            });
        });
    </script>
}
