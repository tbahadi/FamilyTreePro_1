@{
    ViewData["Title"] = "الشجرة العائلية الهرمية";
    var familyTreeId = ViewBag.FamilyTreeId;
    var familyTreeName = ViewBag.FamilyTreeName ?? "شجرة عائلية";
    var personsCount = ViewBag.PersonsCount ?? 0;
    var personsJson = ViewBag.PersonsJson ?? "[]";
}

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - الشجرة العائلية الهرمية</title>

    <!-- جميع المكتبات المطلوبة -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* الأنيميشن */
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@keyframes drawLine {
            from {
                stroke-dashoffset: 1000;
            }

            to {
                stroke-dashoffset: 0;
            }
        }

        /* العقد */
        .tree-node {
            position: absolute;
            min-width: 180px;
            max-width: 250px;
            padding: 12px;
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.2);
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            z-index: 10;
            background: white;
            word-wrap: break-word;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            animation: fadeInUp 0.5s ease-out;
            border: 2px solid transparent;
        }

            .tree-node.male {
                background: linear-gradient(135deg, #e3f2fd, #bbdefb);
                border-color: #1976d2;
            }

            .tree-node.female {
                background: linear-gradient(135deg, #fce4ec, #f8bbd9);
                border-color: #c2185b;
            }

            .tree-node:hover {
                transform: translateY(-5px) scale(1.05);
                box-shadow: 0 8px 25px rgba(0,0,0,0.15);
                z-index: 100;
            }

        .node-name {
            font-weight: bold;
            font-size: 14px;
            margin-bottom: 5px;
            line-height: 1.3;
        }

        .node-details {
            font-size: 11px;
            line-height: 1.3;
        }

        /* الخطوط */
        .connection-line {
            stroke: #666;
            stroke-width: 2;
            fill: none;
            marker-end: url(#arrowhead);
        }

            .connection-line.male {
                stroke: #1976d2;
            }

            .connection-line.female {
                stroke: #c2185b;
            }

        /* إشعارات */
        .alert-notification {
            position: fixed !important;
            top: 20px !important;
            right: 20px !important;
            z-index: 9999 !important;
            min-width: 300px !important;
        }

        /* تحسينات للقوائم المنسدلة */
        .dropdown-menu {
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .dropdown-item {
            transition: all 0.2s ease;
        }

            .dropdown-item:hover {
                background-color: #f8f9fa;
                transform: translateX(5px);
            }

        /* تخصيص للشكل الهرمي */
        .pyramid-container {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            padding: 20px;
        }

        .generation-row {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 40px 0;
            position: relative;
        }

        .generation-label {
            position: absolute;
            left: 10px;
            background: rgba(0,0,0,0.1);
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    @if (personsCount == 0)
    {
        <div class="container-fluid mt-4" dir="rtl">
            <div class="alert alert-info text-center">
                <h4>ℹ️ لا توجد بيانات</h4>
                <p>لم يتم إضافة أي أفراد إلى هذه الشجرة العائلية بعد.</p>
                <a href="@Url.Action("Create", "Person", new { familyTreeId = familyTreeId })" class="btn btn-primary">
                    <i class="fas fa-plus"></i> إضافة أول فرد
                </a>
            </div>
        </div>
        return;
    }

    <div class="container-fluid mt-4" dir="rtl">
        <h2 class="text-center mb-4">@familyTreeName - الشجرة العائلية الهرمية</h2>

        <div class="d-flex justify-content-between mb-3">
            <div>
                <a href="@Url.Action("Index", "Person", new { familyTreeId = familyTreeId })" class="btn btn-secondary">
                    <i class="fas fa-list"></i> العرض العادي
                </a>
                <a href="@Url.Action("FamilyTreeView", "Person", new { familyTreeId = familyTreeId })" class="btn btn-info">
                    <i class="fas fa-project-diagram"></i> الشجرة البسيطة
                </a>
                <button id="printPdf" class="btn btn-success">
                    <i class="fas fa-file-pdf"></i> طباعة PDF
                </button>
            </div>

            <div>
                <button id="zoomIn" class="btn btn-outline-primary">
                    <i class="fas fa-search-plus"></i> تكبير
                </button>
                <button id="zoomOut" class="btn btn-outline-primary">
                    <i class="fas fa-search-minus"></i> تصغير
                </button>
                <button id="resetView" class="btn btn-outline-secondary">
                    <i class="fas fa-sync"></i> إعادة تعيين
                </button>
            </div>
        </div>

        <div id="tree-container" style="width: 100%; height: 700px; border: 1px solid #ddd; border-radius: 10px; background: #f8f9fa; overflow: auto; position: relative;">
            <div id="family-tree" class="pyramid-container" style="position: relative; min-width: 2000px; min-height: 1000px; padding: 50px;">
                <!-- سيتم رسم الشجرة الهرمية هنا -->
            </div>
            <!-- SVG للخطوط -->
            <svg id="connections-svg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 1;"></svg>
        </div>

        <div id="node-info" class="card mt-3" style="display: none;">
            <div class="card-body">
                <h5 id="info-name"></h5>
                <p id="info-details" class="mb-0"></p>
            </div>
        </div>
    </div>

    <!-- جميع مكتبات JavaScript -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

    <script>
        function waitForLibraries() {
            if (window.jQuery && window.bootstrap && window.html2canvas && window.jspdf) {
                console.log('✅ جميع المكتبات محملة');
                initializeApplication();
            } else {
                console.log('⏳ انتظار تحميل المكتبات...');
                setTimeout(waitForLibraries, 100);
            }
        }

        function initializeApplication() {
            console.log('🚀 بدء التطبيق...');

            const personsJson = '@Html.Raw(ViewBag.PersonsJson)' || '[]';
            const familyTreeId = @ViewBag.FamilyTreeId;

            let treeData = [];
            let zoomLevel = 1.0;

            // ========== دوال الأساسية ==========

            function loadTreeData() {
                try {
                    if (personsJson && personsJson !== '[]') {
                        treeData = JSON.parse(personsJson);
                        console.log('✅ تم تحميل بيانات:', treeData.length, 'فرد');
                        return true;
                    }
                    return false;
                } catch (e) {
                    console.error('❌ خطأ في تحليل JSON:', e);
                    return false;
                }
            }

            function initializeSVG() {
                const svg = $('#connections-svg');
                svg.empty();

                const defs = $(`
                    <defs>
                        <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
                            <polygon points="0 0, 10 3.5, 0 7" fill="#666"/>
                        </marker>
                        <marker id="arrowhead-male" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
                            <polygon points="0 0, 10 3.5, 0 7" fill="#1976d2"/>
                        </marker>
                        <marker id="arrowhead-female" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
                            <polygon points="0 0, 10 3.5, 0 7" fill="#c2185b"/>
                        </marker>
                    </defs>
                `);
                svg.append(defs);
            }

            // ========== دوال المساعدة ==========

            function formatDate(dateString) {
                try {
                    if (!dateString) return '';
                    const date = new Date(dateString);
                    return isNaN(date.getTime()) ? dateString : date.toLocaleDateString('ar-EG');
                } catch (e) {
                    return dateString;
                }
            }

            function escapeHtml(unsafe) {
                if (!unsafe) return '';
                return unsafe.toString()
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }

            function showNotification(message, type = 'info') {
                $('.alert-notification').remove();

                const alertClass = {
                    'info': 'alert-info',
                    'success': 'alert-success',
                    'danger': 'alert-danger',
                    'warning': 'alert-warning'
                }[type] || 'alert-info';

                const icon = {
                    'info': 'fa-info-circle',
                    'success': 'fa-check-circle',
                    'danger': 'fa-exclamation-circle',
                    'warning': 'fa-exclamation-triangle'
                }[type] || 'fa-info-circle';

                const notification = $(`
                    <div class="alert ${alertClass} alert-dismissible fade show alert-notification">
                        <div class="d-flex align-items-center">
                            <i class="fas ${icon} me-2"></i>
                            <div>${message}</div>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `);

                $('body').append(notification);

                setTimeout(() => {
                    notification.alert('close');
                }, 5000);
            }

            // ========== دوال الرسم الهرمي ==========

            function organizeByGenerations(persons) {
                const generations = [];

                // إيجاد الجيل الأول (الأجداد بدون آباء)
                const firstGen = persons.filter(person => !person.fatherId);
                generations.push(firstGen);

                let currentGen = firstGen;
                let generationNumber = 1;

                while (currentGen.length > 0) {
                    const nextGen = [];
                    currentGen.forEach(person => {
                        const children = persons.filter(p => p.fatherId === person.id);
                        nextGen.push(...children);
                    });

                    if (nextGen.length > 0) {
                        generations.push(nextGen);
                    }
                    currentGen = nextGen;
                    generationNumber++;
                }
                return generations;
            }

            function createPersonNode(person, x, y, container) {
                const birthDate = formatDate(person.birthDate);
                const city = person.city || '';
                const occupationName = person.occupationName || '';
                const gender = person.gender || 'Male';

                const nodeContent = `
                    <div class="tree-node ${gender === 'Male' ? 'male' : 'female'}"
                         data-person-id="${person.id}"
                         style="left: ${x}px; top: ${y}px;">
                        <div class="node-name">${escapeHtml(person.fullName || 'غير معروف')}</div>
                        <div class="node-details">
                            ${birthDate ? '📅 ' + birthDate + '<br>' : ''}
                            ${city ? '🏠 ' + escapeHtml(city) + '<br>' : ''}
                            ${occupationName ? '💼 ' + escapeHtml(occupationName) : ''}
                        </div>
                    </div>
                `;

                container.append(nodeContent);

                // إضافة حدث النقر
                $(`[data-person-id="${person.id}"]`).on('click', function() {
                    showPersonDetails(person);
                });
            }

            function drawPyramidTree() {
                const container = $('#family-tree');
                container.empty();

                if (treeData.length === 0) {
                    container.html('<div class="alert alert-warning text-center">لا توجد بيانات لعرضها</div>');
                    return;
                }

                const generations = organizeByGenerations(treeData);
                console.log('الأجيال:', generations);

                const containerWidth = 2000;
                const startY = 50;
                const verticalSpacing = 150;

                // إضافة تسمية للشكل الهرمي
                container.append(`
                    <div style="position: absolute; top: 20px; left: 50%; transform: translateX(-50%); background: rgba(0,0,0,0.1); padding: 10px 20px; border-radius: 10px; font-weight: bold;">
                        🏛️ الشكل الهرمي للشجرة العائلية
                    </div>
                `);

                generations.forEach((generation, genIndex) => {
                    const generationY = startY + (genIndex * verticalSpacing);
                    const generationSize = generation.length;
                    const maxGenerationSize = Math.max(...generations.map(gen => gen.length));

                    // حساب المسافة الأفقية بناءً على حجم الجيل
                    const horizontalSpacing = Math.min(300, (containerWidth - 200) / Math.max(1, generationSize));
                    const totalWidth = generationSize * horizontalSpacing;
                    const startX = (containerWidth - totalWidth) / 2;

                    // إضافة تسمية الجيل
                    container.append(`
                        <div class="generation-label" style="top: ${generationY - 30}px;">
                            الجيل ${genIndex + 1}
                        </div>
                    `);

                    generation.forEach((person, personIndex) => {
                        const personX = startX + (personIndex * horizontalSpacing);
                        createPersonNode(person, personX, generationY, container);
                    });
                });

                setTimeout(drawConnections, 200);
            }

            function drawConnections() {
                const svg = $('#connections-svg');
                svg.find('path').remove();

                treeData.forEach(person => {
                    if (person.fatherId) {
                        const father = treeData.find(p => p.id === person.fatherId);
                        if (father) {
                            drawConnection(father, person);
                        }
                    }
                });
            }

            function drawConnection(fromPerson, toPerson) {
                const fromElement = $(`[data-person-id="${fromPerson.id}"]`);
                const toElement = $(`[data-person-id="${toPerson.id}"]`);

                if (fromElement.length === 0 || toElement.length === 0) return;

                const fromRect = fromElement[0].getBoundingClientRect();
                const toRect = toElement[0].getBoundingClientRect();
                const container = $('#family-tree')[0].getBoundingClientRect();

                const fromX = fromRect.left - container.left + fromRect.width / 2;
                const fromY = fromRect.bottom - container.top;
                const toX = toRect.left - container.left + toRect.width / 2;
                const toY = toRect.top - container.top;

                const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                const gender = toPerson.gender || 'Male';
                const arrowhead = gender === 'Male' ? 'url(#arrowhead-male)' : 'url(#arrowhead-female)';

                // مسار منحني للشكل الهرمي
                const controlY = fromY + (toY - fromY) / 2;
                const pathData = `
                    M ${fromX} ${fromY}
                    C ${fromX} ${controlY}, ${toX} ${controlY}, ${toX} ${toY}
                `;

                path.setAttribute('d', pathData);
                path.setAttribute('class', `connection-line ${gender}`);
                path.setAttribute('marker-end', arrowhead);
                path.setAttribute('stroke-dasharray', '1000');
                path.setAttribute('stroke-dashoffset', '1000');

                $('#connections-svg').append(path);

                // أنيميشن رسم الخط
                setTimeout(() => {
                    path.style.animation = 'drawLine 1.5s ease-out forwards';
                }, 100);
            }

            // ========== التفاعل ==========

            function showPersonDetails(person) {
                const birthDate = formatDate(person.birthDate);
                const city = person.city || '';
                const occupationName = person.occupationName || '';

                let details = '';
                if (birthDate) details += `الميلاد: ${birthDate}<br>`;
                if (city) details += `المدينة: ${escapeHtml(city)}<br>`;
                if (occupationName) details += `المهنة: ${escapeHtml(occupationName)}<br>`;
                if (!details) details = 'لا توجد معلومات إضافية';

                $('#info-name').text(person.fullName || 'غير معروف');
                $('#info-details').html(details);
                $('#node-info').show();
            }

            function printToPdf() {
                showNotification('جاري إعداد PDF...', 'info');

                if (typeof html2canvas === 'undefined' || typeof jspdf === 'undefined') {
                    showNotification('المكتبات المطلوبة غير محملة', 'danger');
                    return;
                }

                const element = document.getElementById('tree-container');

                html2canvas(element).then(canvas => {
                    const imgData = canvas.toDataURL('image/png');
                    const pdf = new jspdf.jsPDF({
                        orientation: 'landscape',
                        unit: 'mm',
                        format: 'a4'
                    });

                    const imgWidth = 280;
                    const imgHeight = canvas.height * imgWidth / canvas.width;

                    pdf.addImage(imgData, 'PNG', 10, 10, imgWidth, imgHeight);
                    pdf.save('الشجرة_العائلية_الهرمية.pdf');

                    showNotification('تم إنشاء PDF بنجاح', 'success');
                }).catch(error => {
                    console.error('خطأ في إنشاء PDF:', error);
                    showNotification('حدث خطأ في إنشاء PDF', 'danger');
                });
            }

            // ========== إعداد الأحداث ==========

            function setupEventHandlers() {
                console.log('🔧 إعداد الأحداث...');

                // التكبير والتصغير
                $('#zoomIn').on('click', function() {
                    zoomLevel = Math.min(zoomLevel + 0.1, 2.0);
                    $('#family-tree').css('transform', `scale(${zoomLevel})`);
                });

                $('#zoomOut').on('click', function() {
                    zoomLevel = Math.max(zoomLevel - 0.1, 0.5);
                    $('#family-tree').css('transform', `scale(${zoomLevel})`);
                });

                $('#resetView').on('click', function() {
                    zoomLevel = 1.0;
                    $('#family-tree').css('transform', 'scale(1)');
                    $('#tree-container').scrollLeft(0).scrollTop(0);
                });

                // أحداث أخرى
                $('#printPdf').on('click', printToPdf);

                // إغلاق معلومات العقدة
                $(document).on('click', function(e) {
                    if (!$(e.target).closest('#node-info').length &&
                        !$(e.target).closest('.tree-node').length) {
                        $('#node-info').hide();
                    }
                });

                // السحب والتحريك
                let isDragging = false;
                let startX, startY, scrollLeft, scrollTop;

                $('#tree-container').on('mousedown', function(e) {
                    isDragging = true;
                    startX = e.pageX - $(this).offset().left;
                    startY = e.pageY - $(this).offset().top;
                    scrollLeft = $(this).scrollLeft();
                    scrollTop = $(this).scrollTop();
                    $(this).css('cursor', 'grabbing');
                });

                $(document).on('mousemove', function(e) {
                    if (!isDragging) return;
                    e.preventDefault();
                    const x = e.pageX - $('#tree-container').offset().left;
                    const y = e.pageY - $('#tree-container').offset().top;
                    const walkX = (x - startX) * 2;
                    const walkY = (y - startY) * 2;
                    $('#tree-container').scrollLeft(scrollLeft - walkX);
                    $('#tree-container').scrollTop(scrollTop - walkY);
                });

                $(document).on('mouseup', function() {
                    isDragging = false;
                    $('#tree-container').css('cursor', 'grab');
                });
            }

            // ========== التهيئة الرئيسية ==========

            function initializeTree() {
                console.log('🏛️ بدء تحميل الشجرة الهرمية...');

                if (loadTreeData() && treeData.length > 0) {
                    console.log(`✅ تم تحميل ${treeData.length} فرد`);
                    initializeSVG();
                    drawPyramidTree();
                    setupEventHandlers();
                    showNotification(`تم تحميل ${treeData.length} فرد في الشجرة الهرمية`, 'success');
                } else {
                    console.error('❌ فشل في تحميل البيانات');
                    $('#family-tree').html(`
                        <div class="alert alert-danger text-center" style="margin: 50px;">
                            <h4>❌ خطأ في تحميل البيانات</h4>
                            <p>تعذر تحميل بيانات الشجرة. تأكد من وجود أفراد في الشجرة.</p>
                            <a href="/Person/Create?familyTreeId=${familyTreeId}" class="btn btn-primary">
                                <i class="fas fa-plus"></i> إضافة أول فرد
                            </a>
                        </div>
                    `);
                }
            }

            // بدء التطبيق
            initializeTree();
        }

        // بدء التطبيق بعد تحميل الصفحة
        $(document).ready(function() {
            console.log('📄 الصفحة محملة، انتظار المكتبات...');
            waitForLibraries();
        });
    </script>
</body>
</html>